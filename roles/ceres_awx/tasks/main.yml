---
# tasks main.yml file

## OS Check ##
- name: OS Check
  ansible.builtin.fail:
    msg: The role currently only supports CentOS and RHEL distributions.
  when: ansible_distribution not in ['CentOS', 'Red Hat Enterprise Linux']

## Check for k3s token (needed to access k3s api)
- name: Look for k3s token if not provided
  block:
    - name: Stat k3s token file
      ansible.builtin.stat: path="{{ ceres_awx_ansible_token_file }}"
      register: reg_k3_token_file
    - name: Fail if no k3s token found
      ansible.builtin.fail:
        msg: The role requires k3s installed and token created to access kubernetes api.
      when: not reg_k3_token_file.stat.exists
    # Get token contents if token file exists on host
    - name: lookup k3s ansible token
      ansible.builtin.slurp:
        src: "{{ ceres_awx_ansible_token_file }}"
      register: reg_slurp_k3s_ansible_token
      when: reg_k3_token_file.stat.exists
    # Decode token contents for ansible use
    - name: set fact for k3s ansible token
      ansible.builtin.set_fact:
        ceres_awx_ansible_token: "{{ reg_slurp_k3s_ansible_token['content'] | b64decode }}"
      when: reg_k3_token_file.stat.exists and reg_slurp_k3s_ansible_token.content is defined
  when: ceres_awx_ansible_token is not defined or ceres_awx_ansible_token == None or ceres_awx_ansible_token | length == 0
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_awx_ansible_token
    verbosity: 1

#
# Check if awx is already deployed
- name: Query k3s to see if awx deployment exists
  kubernetes.core.k8s_info:
    api_key: "{{ ceres_awx_ansible_token }}"
    kind: "Deployment"
    namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    name: "{{ ceres_awx_value_resourcename }}"
  register: reg_awx_deployed
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_awx_deployed
    verbosity: 1

## AWX Values File
#
# Remove if ceres_awx_oper_install is False
- name: Remove AWX Values definition file
  ansible.builtin.file:
    path: "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
    state: absent
  when: 
    - reg_awx_deployed.resources != None
    - reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
#
# Add if ceres_awx_oper_install is True
- name: Add AWX Values definition file
  ansible.builtin.template:
    src: "awx-values.yaml.j2"
    dest: "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
    owner: root
    group: root
    mode: "0440"
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

## Add helm repo for awx operator
- name: Add awx operator helm repository
  kubernetes.core.helm_repository:
    name: "{{ ceres_awx_oper_helm_repo_name }}"
    repo_url: "{{ ceres_awx_oper_helm_repo_url }}"
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

## AWX OPERATOR
#
# Remove if ceres_awx_oper_install is False
- name: Use helm to delete awx operator
  kubernetes.core.helm:
    api_key: "{{ ceres_awx_ansible_token }}"
    name: "{{ ceres_awx_oper_helm_deploy_name }}"
    release_state: absent
    release_namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    wait: True
  when: 
    - reg_awx_deployed.resources != None
    - reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
- name: Remove awx namespace
  kubernetes.core.k8s:
    api_key: "{{ ceres_awx_ansible_token }}"
    kind: Namespace
    state: absent
    name: "{{ ceres_awx_oper_helm_deploy_namespace }}"
  when: 
    - reg_awx_deployed.resources != None
    - reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
#
# Add if ceres_awx_oper_install is True
- name: Use helm to deploy awx operator inside awx namespace (create namespace if needed)
  kubernetes.core.helm:
    api_key: "{{ ceres_awx_ansible_token }}"
    name: "{{ ceres_awx_oper_helm_deploy_name }}"
    chart_ref: "{{ ceres_awx_oper_helm_deploy_chart_ref }}"
    values_files:
      - "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
    release_state: present
    release_namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    create_namespace: True
    update_repo_cache: True
    wait: True
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install
- name: Wait for awx operator to deploy awx with postgres
  kubernetes.core.k8s_info:
    api_key: "{{ ceres_awx_ansible_token }}"
    kind: "Deployment"
    namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    name: "{{ ceres_awx_value_resourcename }}"
    wait_sleep: 15
    wait_timeout: 600
  register: reg_oper_awx_deploy
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

# Get the admin password
- name: Get the awx admin password
  ansible.builtin.shell:
    cmd: "kubectl get secret {{ ceres_awx_value_resourcename }}-admin-password -n {{ ceres_awx_oper_helm_deploy_namespace }} -o jsonpath='{.data.password}' | base64 --decode ; echo"
  register: ceres_awx_admin_pass
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_awx_admin_pass
    verbosity: 1
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install
# Write to file
- name: write admin file
  ansible.builtin.copy:
    dest: "{{ ceres_awx_admin_pass_file }}"
    owner: root
    group: root
    mode: 0400
    content: "{{ ceres_awx_admin_pass }}"
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

