---
- name: Local Playbook - Install Ansible AWX onto a local VM
  hosts: cereslocal
  become: true
 
  # By default three main roles are run
  # These can be disabled for testing by setting these launch values to False
  vars:
    launch_role_localenv: True
    launch_role_k3s: True
    launch_role_awx: True

  tasks:
  #
  # Set facts based on OS
  - name: Set facts for CentOS
    ansible.builtin.set_fact:
      ceres_localenv_resize_dev: "/dev/sda"
      ceres_localenv_resize_part: 1        # centos / is on sda1
      ceres_localenv_resize_fstype: "ext4" # centos / is ext4
    when: ansible_distribution == 'CentOS'
  - name: Set facts for Rocky
    ansible.builtin.set_fact:
      ceres_localenv_resize_dev: "/dev/sda"
      ceres_localenv_resize_part: 5        # rocky / is on sda5
      ceres_localenv_resize_fstype: "xfs"  # rocky / is xfs
    when: ansible_distribution == 'Rocky'

  # 
  # Call role ceres_localenv to resize root partition on target machine for AWX
  - name: Import role ceres_localenv
    ansible.builtin.import_role:
      name: ceres_localenv
    vars:
      ceres_localenv_resize_disk: True
      ceres_localenv_pkgs_qol_install: True
      ceres_localenv_pkgs_build_install: False
      ceres_localenv_pkgs_ansible_install: False
    when: launch_role_localenv

  #
  # Call role ceres_k3s to install k3s varient of Kubernetes on target machine for AWX
  - name: Import role ceres_k3s
    ansible.builtin.import_role:
      name: ceres_k3s
    vars:
      # k3s defaults - uncomment to change as needed
      #ceres_k3s_installer_version: "v1.25.6+k3s1"
      #ceres_k3s_installer_channel: "stable"
      #ceres_k3s_exec_role: "server"
      #
      # k3s installation is required for AWX set to false to uninstall
      ceres_k3s_installer_install: True
      #
      # Reinstall k3s by setting this to True
      # Good for changing versions as it does uninstall then install
      ceres_k3s_installer_reinstall: False
      #
      # This ingress is required for awx
      ceres_k3s_nginx_ingress_install: True
      #
      # Dashboard is not required but can be nice, change below to True to install
      ceres_k3s_kube_dashboard_install: False
      ceres_k3s_dashboard_ingress_install: False
    when: launch_role_k3s

  #
  # Call role ceres_awx to install awx on target machine
  - name: Import role ceres_awx
    ansible.builtin.import_role:
      name: ceres_awx
    vars:
      ceres_awx_ansible_token: "{{ omit if ceres_k3s_ansible_token is not defined else ceres_k3s_ansible_token }}"
      #
      # awx install and ingress are required, setting to false will uninstall
      # which can be helpful if troubleshooting a bad install
      ceres_awx_oper_install: True
      ceres_awx_ingress_install: True
    when: launch_role_awx

  #
  # Save connection details to local files
  - name: Save Dashboard Ingress Connection Info
    ansible.builtin.copy:
      content: "{{ ceres_k3s_dashboard_ingress_connect }}\n"
      dest: "CONNECT_{{ inventory_hostname }}_dashboard.key"
    delegate_to: localhost
    when:
      - ceres_k3s_dashboard_ingress_connect is defined
      - ceres_k3s_dashboard_ingress_connect != None
  - name: Save AWX Ingress Connection Info
    ansible.builtin.copy:
      content: "{{ ceres_awx_ingress_connect }}\n"
      dest: "CONNECT_{{ inventory_hostname }}_awx.key"
    delegate_to: localhost
    when:
      - ceres_awx_ingress_connect is defined
      - ceres_awx_ingress_connect != None

  #
  # Print final status messages
  - name: Print Dashboard Ingress Connection Info
    ansible.builtin.debug:
      msg: "{{ ceres_k3s_dashboard_ingress_connect.split('\n') }}"
      verbosity: 0
    when: 
      - ceres_k3s_dashboard_ingress_connect is defined
      - ceres_k3s_dashboard_ingress_connect != None
  - name: Print AWX Ingress Connection Info
    ansible.builtin.debug:
      msg: "{{ ceres_awx_ingress_connect.split('\n') }}"
      verbosity: 0
    when: 
      - ceres_awx_ingress_connect is defined
      - ceres_awx_ingress_connect != None
