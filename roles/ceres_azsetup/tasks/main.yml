---
# tasks main.yml file

# Get azure location from the resource group
# This also acts as a first test of the provided azure values
- name: Lookup Resource Group Info
  azure.azcollection.azure_rm_resourcegroup_info:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    name: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
  register: reg_rginfo_results
- name: Set Location from Resource Group Info
  ansible.builtin.set_fact:
    ceres_azsetup_az_location: "{{ reg_rginfo_results.resourcegroups.0.location }}"
  when: reg_rginfo_results.resourcegroups.0.location is defined
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_rginfo_results
    verbosity: 1


##
## Virtual Network
##
- name: VNET Setup
  azure.azcollection.azure_rm_virtualnetwork:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_vnet_name }}"
    address_prefixes_cidr: "{{ ceres_azsetup_az_vnet_ip_block }}"
  register: reg_vnet_setup_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_vnet_setup_results
    verbosity: 1

##
## Application Security Group
##
- name: ASG Setup
  azure.azcollection.azure_rm_applicationsecuritygroup:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_asg_name }}"
  register: reg_asg_setup_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_asg_setup_results
    verbosity: 1

##
## Network Security Group
##
- name: NSG Setup
  azure.azcollection.azure_rm_securitygroup:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_nsg_name }}"
    rules:
      # Inbound to the ASG that will contain the awx vm
      # Open to any source by default, should restrict source to owners source IP only
      - name: ib_to_awx_asg
        protocol: Tcp
        source_address_prefix: "{{ ceres_azsetup_az_nsg_ib_asg_ip }}"
        destination_application_security_groups:
          - "{{ ceres_azsetup_az_asg_name }}"
        destination_port_range: ['22', '443']
        access: Allow
        priority: 110
        direction: Inbound
      # Since NSG is applied to vm NIC it can interfere with internal k3s communication
      # These next three rules allow that internal k3s communication
      - name: ib_k3s_to_vnet
        protocol: '*'
        source_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_address_prefix: VirtualNetwork
        destination_port_range: '*'
        access: Allow
        priority: 120
        direction: Inbound
      - name: ib_vnet_to_k3s
        protocol: '*'
        source_address_prefix: VirtualNetwork
        destination_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_port_range: '*'
        access: Allow
        priority: 121
        direction: Inbound
      - name: ib_k3s_to_k3s
        protocol: '*'
        source_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_port_range: '*'
        access: Allow
        priority: 122
        direction: Inbound
      # Outbound from the ASG that will contain the awx vm
      # Open to any destination for now, should restrict destination to automation target IPs only
      - name: ob_from_awx_asg
        protocol: Tcp
        source_application_security_groups:
          - "{{ ceres_azsetup_az_asg_name }}"
        destination_address_prefix: "{{ ceres_azsetup_az_nsg_ob_asg_ip }}"
        destination_port_range: ['22', '443', '5985', '5986']
        access: Allow
        priority: 110
        direction: Outbound
      # Since NSG is applied to vm NIC it can interfere with internal k3s communication
      # These next three rules allow that internal k3s communication
      - name: ob_k3s_to_vnet
        protocol: '*'
        source_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_address_prefix: VirtualNetwork
        destination_port_range: '*'
        access: Allow
        priority: 120
        direction: Outbound
      - name: ob_vnet_to_k3s
        protocol: '*'
        source_address_prefix: VirtualNetwork
        destination_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_port_range: '*'
        access: Allow
        priority: 121
        direction: Outbound
      - name: ob_k3s_to_k3s
        protocol: '*'
        source_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_address_prefix: "{{ ceres_azsetup_az_nsg_k3s_ip }}"
        destination_port_range: '*'
        access: Allow
        priority: 122
        direction: Outbound
  register: reg_nsg_setup_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_nsg_setup_results
    verbosity: 1

##
## Subnet
##
- name: Subnet Setup
  azure.azcollection.azure_rm_subnet:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    virtual_network_name: "{{ ceres_azsetup_az_vnet_name }}"
    name: "{{ ceres_azsetup_az_subnet_name }}"
    address_prefix_cidr: "{{ ceres_azsetup_az_subnet_ip }}"
    security_group: "{{ ceres_azsetup_az_nsg_name }}"
  register: reg_subnet_setup_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_subnet_setup_results
    verbosity: 1

##
## Unique DNS Label Name (For Public IP)
##
- name: Lookup Public IP Name (to see if it already exists)
  azure_rm_publicipaddress_info:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_pubip_name }}"
  register: reg_pubip_info
- name: Set fact for dnslabel from public ip info if exists
  ansible.builtin.set_fact:
    ceres_azsetup_az_vm_dnslabel: "{{ reg_pubip_info.publicipaddresses.0.dns_settings.domain_name_label }}"
  when: reg_pubip_info.publicipaddresses.0.dns_settings.domain_name_label is defined
- name: Generate a dnslabel from vm_hostname and a random string if no dnslabel exists
  ansible.builtin.set_fact:
    ceres_azsetup_az_vm_dnslabel: "{{ ceres_azsetup_az_vm_hostname + '-' + lookup('community.general.random_string', upper=false, special=false, length=10) }}"
  when: reg_pubip_info.publicipaddresses.0.dns_settings.domain_name_label is not defined
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_azsetup_az_vm_dnslabel
    verbosity: 1

##
## Public IP
##
- name: Public IP Setup
  azure.azcollection.azure_rm_publicipaddress:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_pubip_name }}"
    domain_name: "{{ ceres_azsetup_az_vm_dnslabel }}"
    sku: "standard"
    allocation_method: "static"
  register: reg_pubip_setup_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pubip_setup_results
    verbosity: 1
#
- name: Set fact for FQDN from public ip
  ansible.builtin.set_fact:
    ceres_azsetup_az_pubip_fqdn: "{{ reg_pubip_setup_results.state.dns_settings.fqdn }}"
  when: reg_pubip_setup_results.state.dns_settings.fqdn is defined
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_azsetup_az_pubip_fqdn
    verbosity: 1

##
## Azure SSH Key pair
##
- name: Stat Azure SSH Key
  ansible.builtin.stat: path="{{ ceres_azsetup_az_vm_private_key }}.pub"
  register: reg_stat_az_sshkey
# Read from file if its there
- name: Get public key contents from file if it exists
  ansible.builtin.set_fact:
    ceres_azsetup_az_vm_pub_key_contents: "{{ lookup('ansible.builtin.file', (ceres_azsetup_az_vm_private_key + '.pub') ) }}"
  when: reg_stat_az_sshkey.stat.exists
# Create SSH Key Pair if its not there
- name: Create new SSH Key Pair for Azure
  community.crypto.openssh_keypair:
    path: "{{ ceres_azsetup_az_vm_private_key }}"
  when: not reg_stat_az_sshkey.stat.exists
# Read the new file
- name: Get public key contents from newly generated file
  ansible.builtin.set_fact:
    ceres_azsetup_az_vm_pub_key_contents: "{{ lookup('ansible.builtin.file', (ceres_azsetup_az_vm_private_key + '.pub') ) }}"
  when: not reg_stat_az_sshkey.stat.exists
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_azsetup_az_vm_pub_key_contents
    verbosity: 1

##
## Update Inventory File
##
- name: Insert/Update azure vm details in ceres.inventory.yml
  ansible.builtin.blockinfile:
    path: ceres.inventory.yml
    block: |2
              {{ ceres_azsetup_az_vm_hostname }}:
                ansible_ssh_user: {{ ceres_azsetup_az_vm_user }}
                ansible_ssh_private_key_file: ./{{ ceres_azsetup_az_vm_private_key }}
                ansible_host: {{ ceres_azsetup_az_pubip_fqdn }}
                ceres_awx_ingress_fqdn: {{ ceres_azsetup_az_pubip_fqdn }}

##
## Network Interface Card
##
- name: Create NIC using VNET/Subnet/ASG/Public-IP from above
  azure.azcollection.azure_rm_networkinterface:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_vm_hostname }}-01-nic"
    virtual_network: "{{ ceres_azsetup_az_vnet_name }}"
    subnet_name: "{{ ceres_azsetup_az_subnet_name }}"
    create_with_security_group: False
    ip_configurations:
      - name: "ipconfig1"
        public_ip_address_name: "{{ ceres_azsetup_az_pubip_name }}"
        application_security_groups:
          - name: "{{ ceres_azsetup_az_asg_name }}"
            resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
        primary: True
  register: reg_nic_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_nic_results
    verbosity: 1

##
## Virtual Machine
##
- name: Virtual Machine
  azure.azcollection.azure_rm_virtualmachine:
    tenant: "{{ ceres_azsetup_az_tenant_id }}"
    subscription_id: "{{ ceres_azsetup_az_subscription_id }}"
    resource_group: "{{ ceres_azsetup_az_resource_group_name }}"
    client_id: "{{ ceres_azsetup_az_spn_client_id }}"
    secret: "{{ ceres_azsetup_az_spn_secret }}"
    name: "{{ ceres_azsetup_az_vm_hostname }}"
    admin_username: "{{ ceres_azsetup_az_vm_user }}"
    ssh_password_enabled: false
    ssh_public_keys:
      - path: "/home/{{ ceres_azsetup_az_vm_user }}/.ssh/authorized_keys"
        key_data: "{{ ceres_azsetup_az_vm_pub_key_contents }}"
    managed_disk_type: "StandardSSD_LRS"
    vm_size: "Standard_B2ms"
    network_interfaces: "{{ ceres_azsetup_az_vm_hostname }}-01-nic"
    image:
      offer: "RHEL"
      publisher: "RedHat"
      sku: "9-lvm-gen2"
      version: "latest"
  register: reg_vm_results
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_vm_results
    verbosity: 1
