---
# tasks main.yml file

# PREREQUISITES

## OS Check ##
- name: OS Check
  ansible.builtin.fail:
    msg: The role currently only supports CentOS and RHEL distributions.
  when: ansible_distribution not in ['CentOS', 'Red Hat Enterprise Linux']

## DISABLE SELINUX & FIREWALLD
#
# selinux
- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
#
# firewalld
- name: Stop and Disable FirewallD
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: False

## IP FORWARDING
# 
# Set ip forwarding on in /proc and in the sysctl file and reload if necessary
- ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: True
    state: present
    reload: True

## MODPROBE BR_NETFILTER MODULE
#
# Add Modprobe br_netfilter module
- name: Add br_netfilter to /etc/modules-load.d/
  ansible.builtin.template:
    src: "br_netfilter.conf.j2"
    dest: "/etc/modules-load.d/br_netfilter.conf"
    owner: root
    group: root
    mode: 0600
#
# Load Modprobe br_netfilter module
- name: Load br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present

## SUDO SECURE_PATH
#
# Add /usr/local/bin to sudo secure_path
- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
    regexp: Defaults(\s)*secure_path(\s)*=
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: visudo -cf %s

# SETUP
- name: create required directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
  loop:
    - path: "{{ ceres_k3s_installer_directory }}"
      mode: "0700"
      owner: root
      group: root
    - path: "{{ ceres_k3s_bin_directory }}"
      mode: "0755"
    - path: "{{ ceres_k3s_default_storage_path }}"
      mode: "0755"
    - path: "{{ ceres_k3s_config_file | dirname }}"
      mode: "0750"
    - path: "{{ ceres_k3s_ansible_token_file | dirname }}"
      mode: "0750"

# DOWNLOAD
- name: Download k3s installer
  ansible.builtin.get_url:
    url: "{{ ceres_k3s_installer_url }}"
    dest: "{{ ceres_k3s_installer_directory }}/k3s-install.sh"
    mode: "0700"

- name: Stat k3s binary
  ansible.builtin.stat: path="{{ ceres_k3s_bin_directory }}/k3s"
  register: reg_k3binary

# INSTALL
- name: Install Block
  block:
    - name: Set facts for installer environment
      set_fact:
        ceres_k3s_install_env:
          INSTALL_K3S_VERSION: "{{ ceres_k3s_installer_version }}"
          INSTALL_K3S_CHANNEL: "{{ ceres_k3s_installer_channel }}"
          INSTALL_K3S_BIN_DIR: "{{ ceres_k3s_bin_directory }}"
          INSTALL_K3S_EXEC: "{{ ceres_k3s_exec_role }}"
          INSTALL_K3S_SKIP_START: "true"

    - name: Execute k3s installer
      ansible.builtin.command:
        cmd: "{{ ceres_k3s_installer_directory }}/k3s-install.sh"
        creates: "{{ ceres_k3s_bin_directory }}/k3s"
      environment: "{{ ceres_k3s_install_env }}"
      register: reg_k3s_install

  always:
    - name: Create k3s install logs
      ansible.builtin.copy:
        dest: "{{ ceres_k3s_installer_directory }}/k3s-install.{{ item.type }}.log"
        content: |
          # k3s install log ({{ item.type }})
          # start: {{ reg_k3s_install.start }}
          # environment:
          {% for k, v in ceres_k3s_install_env.items() %}
          {{ k }}={{ v }}
          {% endfor %}
          # log:
          {{ reg_k3s_install[item.type] }}
          # end: {{ reg_k3s_install.end }}
        mode: "0440"
      loop:
        - type: stdout
        - type: stderr
      when: reg_k3s_install.changed | bool

  when: not reg_k3binary.stat.exists or ceres_k3s_installer_reinstall

