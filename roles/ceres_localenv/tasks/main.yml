---
# tasks main.yml file

# PREREQUISITES

## OS Check ##
- name: OS Check
  ansible.builtin.fail:
    msg: 
    - "The role currently only supports CentOS Stream and RHEL distributions."
    - "Detected distribution: {{ ansible_distribution }}"
  when: ansible_distribution not in ['CentOS', 'RedHat', 'Red Hat Enterprise Linux']

## DISABLE SELINUX & FIREWALLD
#
# selinux
- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
  register: reg_localenv_selinux_result
#
# firewalld
- name: Stop and Disable FirewallD
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: False
  register: reg_localenv_firewalld_result
  when:
    - ansible_facts.services['firewalld'] is defined
    - ansible_facts.services['firewalld'].state == 'running'

## SUDO SECURE_PATH
#
# Add /usr/local/bin to sudo secure_path
- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
    regexp: Defaults(\s)*secure_path(\s)*=
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: visudo -cf %s

## EPEL
#
# check if epel repo has already been configured
- name: Check if EPEL repo is already configured.
  ansible.builtin.stat:
    path: "{{ ceres_localenv_epel_repofile_path }}"
  register: reg_epel_repofile_result
#
# crb on centos
- name: Enable codeready-builder repository on CentOS
  ansible.builtin.command: "dnf config-manager --set-enabled crb"
  when: 
    - not reg_epel_repofile_result.stat.exists
    - ansible_distribution == 'CentOS'
#
# epel on centos
- name: Install epel-release and epel-next-release on CentOS
  ansible.builtin.dnf:
    name:
      - epel-release
      - epel-next-release
    state: present
  when: 
    - not reg_epel_repofile_result.stat.exists
    - ansible_distribution == 'CentOS'

#
# crb on rhel - ### broken on azure rhel which uses RHUI license
#- name: Enable codeready-builder repository on RHEL
#  community.general.rhsm_repository:
#    name: codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-{{ ansible_facts.architecture }}-rpms
#  when: 
#    - not reg_epel_repofile_result.stat.exists
#    - ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat'
#
# gpg for epel on rhel
- name: Import EPEL GPG key on RHEL
  ansible.builtin.rpm_key:
    key: "{{ ceres_localenv_epel_repo_gpg_key_url }}"
    state: present
  register: reg_epel_rhel_gpg_result
  until: reg_epel_rhel_gpg_result is succeeded
  retries: 3
  delay: 10
  when: 
    - not reg_epel_repofile_result.stat.exists
    - ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat'
#
# epel on rhel
- name: Install EPEL repo.
  ansible.builtin.yum:
    name: "{{ ceres_localenv_epel_repo_url }}"
    state: present
  register: reg_epel_rhel_rhel_result
  until: reg_epel_rhel_rhel_result is succeeded
  retries: 3
  delay: 10
  when: 
    - not reg_epel_repofile_result.stat.exists
    - ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat'

## YUM UPDATE
#
# update the yum cache and all installed packages after epel repo add
- name: Update yum cache and all installed packages
  ansible.builtin.yum:
    name: '*'
    state: latest
    update_cache: True
    update_only: True
  register: reg_yum_update_result
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_yum_update_result
    verbosity: 1

## INSTALL BUILD PKGS
#
# Install build packages
- name: Install build packages
  ansible.builtin.yum:
    name: "{{ ceres_localenv_pkgs_build_list }}"
    state: present
  register: reg_pkgs_build_result
  when: ceres_localenv_pkgs_build_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_build_result
    verbosity: 1

## INSTALL QUALITY OF LIFE PKGS
#
# Install quality of life packages
- name: Install qol packages
  ansible.builtin.yum:
    name: "{{ ceres_localenv_pkgs_qol_list }}"
    state: present
  register: reg_pkgs_qol_result
  when: ceres_localenv_pkgs_qol_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_qol_result
    verbosity: 1

## INSTALL ANSIBLE PKGS
#
# Install ansible and podman
- name: Install ansible-core and podman packages
  ansible.builtin.yum:
    name:
      - ansible-core
      - podman
    state: present
  register: reg_pkgs_ans_result
  when: 
    - ceres_localenv_pkgs_ansible_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_ans_result
    verbosity: 1
#
# Install ansible-navigator pip
- name: Install ansible-navigator pip package
  ansible.builtin.pip:
    name: ansible-navigator
  register: reg_pkgs_ansn_result
  when: 
    - ceres_localenv_pkgs_ansible_install
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_pkgs_ansn_result
    verbosity: 1

## Custom color prompt
#
# Install custom color prompt without git support
- name: Install custom color prompt to /etc/profile.d
  ansible.builtin.template:
    src: "setPS1.sh.j2"
    dest: "/etc/profile.d/setPS1.sh"
    owner: root
    group: root
    mode: "0444"
  when: 
    - ceres_localenv_custom_color_prompt
    - not ceres_localenv_custom_color_prompt_git_support
#
# Install custom color prompt with git support
- name: Install custom color prompt with git support block
  block:
    - name: Check if git-prompt.sh exists
      ansible.builtin.stat:
        path: /etc/profile.d/git-prompt.sh
      register: reg_gitprompt_file
    - name: Download git-prompt.sh Git Completion File
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/git/git/refs/heads/master/contrib/completion/git-prompt.sh
        dest: /etc/profile.d/git-prompt.sh
        mode: '0444'
      when: not reg_gitprompt_file.stat.exists
    - name: Install custom color prompt with git support to /etc/profile.d
      ansible.builtin.template:
        src: "setPS1git.sh.j2"
        dest: "/etc/profile.d/setPS1.sh"
        owner: root
        group: root
        mode: "0444"
  when: 
    - ceres_localenv_custom_color_prompt
    - ceres_localenv_custom_color_prompt_git_support

#
## Reboot VM to fully affect some changes above
- name: Reboot machine to ensure all updates are applied
  ansible.builtin.reboot:
    reboot_timeout: 3600
  when: reg_localenv_selinux_result.changed or reg_localenv_firewalld_result.changed or reg_yum_update_result.changed
