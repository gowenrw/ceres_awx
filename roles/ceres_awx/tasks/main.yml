---
# tasks main.yml file

## OS Check ##
- name: OS Check
  ansible.builtin.fail:
    msg: 
    - "The role currently only supports CentOS and Rocky and RHEL distributions."
    - "Detected distribution: {{ ansible_distribution }}"
  when: ansible_distribution not in ['CentOS', 'RedHat', 'Red Hat Enterprise Linux', 'Rocky']

## Check for k3s token (needed to access k3s api)
- name: Look for k3s token if not provided
  block:
    - name: Stat k3s token file
      ansible.builtin.stat: path="{{ ceres_awx_ansible_token_file }}"
      register: reg_k3_token_file
    - name: Fail if no k3s token found
      ansible.builtin.fail:
        msg: The role requires k3s installed and token created to access kubernetes api.
      when: not reg_k3_token_file.stat.exists
    # Get token contents if token file exists on host
    - name: lookup k3s ansible token
      ansible.builtin.slurp:
        src: "{{ ceres_awx_ansible_token_file }}"
      register: reg_slurp_k3s_ansible_token
      when: reg_k3_token_file.stat.exists
    # Decode token contents for ansible use
    - name: set fact for k3s ansible token
      ansible.builtin.set_fact:
        ceres_awx_ansible_token: "{{ reg_slurp_k3s_ansible_token['content'] | b64decode }}"
      when: reg_k3_token_file.stat.exists and reg_slurp_k3s_ansible_token.content is defined
  when: ceres_awx_ansible_token is not defined or ceres_awx_ansible_token == None or ceres_awx_ansible_token | length == 0
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_awx_ansible_token
    verbosity: 1

#
# Check if awx is already deployed by checking for service
- name: Query k3s to see if awx service exists
  kubernetes.core.k8s_info:
    api_key: "{{ ceres_awx_ansible_token }}"
    kind: "Service"
    namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    name: "{{ ceres_awx_value_servicename }}"
  register: reg_awx_deployed
#
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: reg_awx_deployed
    verbosity: 1

## AWX Values File
#
# Remove if ceres_awx_oper_install is False
- name: Remove AWX Values definition file - when ceres_awx_oper_install is False (REMOVE AWX)
  ansible.builtin.file:
    path: "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
    state: absent
  when: 
    #- reg_awx_deployed.resources != None
    #- reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
#
# Add if ceres_awx_oper_install is True
- name: Add AWX Values definition file if AWX is not already deployed
  ansible.builtin.template:
    src: "awx-values.yaml.j2"
    dest: "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
    owner: root
    group: root
    mode: "0440"
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

## Add helm repo for awx operator
- name: Add awx operator helm repository
  kubernetes.core.helm_repository:
    name: "{{ ceres_awx_oper_helm_repo_name }}"
    repo_url: "{{ ceres_awx_oper_helm_repo_url }}"
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

## AWX OPERATOR
#
# Remove AWX if ceres_awx_oper_install is False and we see it installed
- name: Use helm to delete awx operator - when ceres_awx_oper_install is False (REMOVE AWX)
  kubernetes.core.helm:
    api_key: "{{ ceres_awx_ansible_token }}"
    name: "{{ ceres_awx_oper_helm_deploy_name }}"
    release_state: absent
    release_namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
    wait: True
  when: 
    #- reg_awx_deployed.resources != None
    #- reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
- name: Remove awx namespace - when ceres_awx_oper_install is False (REMOVE AWX)
  kubernetes.core.k8s:
    api_key: "{{ ceres_awx_ansible_token }}"
    kind: Namespace
    state: absent
    name: "{{ ceres_awx_oper_helm_deploy_namespace }}"
  when: 
    #- reg_awx_deployed.resources != None
    #- reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
#
# Install AWX if ceres_awx_oper_install is True and we dont see it installed
- name: AWX Install block
  block:
    # Helm awx operator install with value file for awx-deploy
    - name: Use helm to deploy awx operator inside awx namespace (create namespace if needed)
      kubernetes.core.helm:
        api_key: "{{ ceres_awx_ansible_token }}"
        name: "{{ ceres_awx_oper_helm_deploy_name }}"
        chart_ref: "{{ ceres_awx_oper_helm_deploy_chart_ref }}"
        chart_version: "{{ ceres_awx_oper_helm_deploy_chart_version }}"
        values_files:
          - "{{ ceres_awx_kube_app_defs_path }}/awx-values.yaml"
        release_state: present
        release_namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
        create_namespace: True
        update_repo_cache: True
        wait: True
      register: reg_oper_helm
    # Wait for deploy to finish before continuing
    - name: Wait for awx deployment to finish - This may take up to 7 minutes
      kubernetes.core.k8s_info:
        api_key: "{{ ceres_awx_ansible_token }}"
        kind: Deployment
        namespace: "{{ ceres_awx_oper_helm_deploy_namespace }}"
        name: "{{ ceres_awx_value_deployment_name }}"
        wait: True
        wait_sleep: 15
        wait_timeout: 420
      register: reg_oper_awx_depl
    # AWX needs time to set up things before it is ready
    - name: Pause for a bit to let k3s and awx catch up before doing anything else
      ansible.builtin.pause:
        seconds: 60
  always:
    # Dump the output of block tasks if needed for troubleshooting
    - name: "Debug block tasks output"
      ansible.builtin.debug:
        msg:
        - "{{ omit if reg_oper_helm is not defined else reg_oper_helm }}"
        - "{{ omit if reg_oper_awx_depl is not defined else reg_oper_awx_depl }}"
        verbosity: 1
  when: 
    - not reg_awx_deployed.resources | default(None)
    - ceres_awx_oper_install

## AWX ADMIN
#
# Remove if ceres_awx_oper_install is False
- name: Remove AWX Admin file - when ceres_awx_oper_install is False (REMOVE AWX)
  ansible.builtin.file:
    path: "{{ ceres_awx_admin_pass_file }}"
    state: absent
  when: 
    #- reg_awx_deployed.resources != None
    #- reg_awx_deployed.resources | length >0
    - not ceres_awx_oper_install
#
# Get the admin password
- name: Get the awx admin password
  ansible.builtin.shell:
    cmd: "kubectl get secret {{ ceres_awx_value_resourcename }}-admin-password -n {{ ceres_awx_oper_helm_deploy_namespace }} -o jsonpath='{.data.password}' | base64 --decode ; echo"
  register: ceres_awx_admin_pass
  when: 
    - ceres_awx_oper_install
# Dump the output of previous task if needed for troubleshooting
- name: "Debug task output"
  ansible.builtin.debug:
    var: ceres_awx_admin_pass
    verbosity: 1
  when: 
    - ceres_awx_oper_install
# Write to file
- name: write admin file
  ansible.builtin.copy:
    dest: "{{ ceres_awx_admin_pass_file }}"
    owner: root
    group: root
    mode: 0400
    content: "{{ ceres_awx_admin_pass.stdout }}"
  when: 
    - ceres_awx_oper_install

## AWX INGRESS
#
#
# Remove the ingress def file if exists and no ingress
- name: Remove the AWX ingress def file if exists - when install or ingress are set to False
  ansible.builtin.file:
    path: "{{ ceres_awx_kube_app_defs_path }}/awx-ingress.yml"
    state: absent
  when: 
    - not ceres_awx_oper_install or not ceres_awx_ingress_install
# Create the ingress def file
- name: AWX Ingress definition file
  ansible.builtin.template:
    src: "awx-ingress.yml.j2"
    dest: "{{ ceres_awx_kube_app_defs_path }}/awx-ingress.yml"
    owner: root
    group: root
    mode: "0440"
  register: reg_awx_ingress_def
  when: 
    - ceres_awx_oper_install
    - ceres_awx_ingress_install
    - ceres_awx_ingress_fqdn is defined
    - ceres_awx_ingress_fqdn | length >0
# Create/Update awx ingress from definition
- name: Create / Update awx ingress from definition
  block:
    - name: Create AWX Ingress from definition
      ansible.builtin.command:
        cmd: "kubectl create -f {{ ceres_awx_kube_app_defs_path }}/awx-ingress.yml --save-config"
      register: reg_awx_ingress_create
  rescue:
    - name: Update AWX Ingress from definition
      ansible.builtin.command:
        cmd: "kubectl apply -f {{ ceres_awx_kube_app_defs_path }}/awx-ingress.yml"
      register: reg_awx_ingress_update
  always:
    # Dump the output of block tasks if needed for troubleshooting
    - name: Debug block tasks output
      ansible.builtin.debug:
        msg:
        - "{{ omit if reg_awx_ingress_create is not defined else reg_awx_ingress_create }}"
        - "{{ omit if reg_awx_ingress_update is not defined else reg_awx_ingress_update }}"
        verbosity: 1
  # Only run the create/update block if the definition file changed
  when: 
    - ceres_awx_oper_install
    - ceres_awx_ingress_install
    - ceres_awx_ingress_fqdn is defined
    - ceres_awx_ingress_fqdn | length >0
    - reg_awx_ingress_def.changed
# Save connection info
- name: Save AWX Ingress Connect Details
  ansible.builtin.set_fact:
    ceres_awx_ingress_connect: |-
      AWX URL - https://{{ ceres_awx_ingress_fqdn }}/awx/#/login
      NOTE: This link might show a 5xx error for the first few mins, be patient
      Authentication user - {{ ceres_awx_value_admin_user }}
      Authentication pass - 
      {{ ceres_awx_admin_pass.stdout }}
  when: 
    - ceres_awx_oper_install
    - ceres_awx_ingress_install
    - ceres_awx_ingress_fqdn is defined
    - ceres_awx_ingress_fqdn | length >0

